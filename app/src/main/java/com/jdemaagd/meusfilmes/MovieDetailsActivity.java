package com.jdemaagd.meusfilmes;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.databinding.DataBindingUtil;
import androidx.loader.app.LoaderManager;
import androidx.loader.app.LoaderManager.LoaderCallbacks;
import androidx.loader.content.AsyncTaskLoader;
import androidx.loader.content.Loader;

import com.jdemaagd.meusfilmes.data.AppDatabase;
import com.jdemaagd.meusfilmes.databinding.ActivityDetailsMovieBinding;
import com.jdemaagd.meusfilmes.models.Movie;
import com.jdemaagd.meusfilmes.network.AppExecutor;
import com.jdemaagd.meusfilmes.network.JsonUtils;
import com.jdemaagd.meusfilmes.network.UrlUtils;
import com.squareup.picasso.Picasso;

import java.net.URL;

public class MovieDetailsActivity extends AppCompatActivity implements LoaderCallbacks<Movie> {

    private static final String LOG_TAG = MovieDetailsActivity.class.getSimpleName();

    private AppDatabase mAppDatabase;
    private ActivityDetailsMovieBinding mBinding;
    private LoaderCallbacks<Movie> mCallback;
    private boolean mFavorite;
    private Movie mMovie;
    private int mMovieId;

    private static final int MOVIE_LOADER_ID = 1;

    // "w92", "w154", "w185", "w342", "w500", "w780",
    private static final String POSTER_BASE_URL = "https://image.tmdb.org/t/p/w342";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mBinding = DataBindingUtil.setContentView(this, R.layout.activity_details_movie);
        mBinding.setLifecycleOwner(this);

        Intent intent = getIntent();

        if (intent != null) {
            Bundle movieBundle = intent.getExtras();
            // mMovie = (Movie) movieBundle.getSerializable("MOVIE");
            mMovieId = intent.getIntExtra("MOVIE_ID", 0);

            mFavorite = false;
            // TODO: reviews and trailers to view
            // ../id/reviews
            // ../id/videos
        }

        mAppDatabase = AppDatabase.getInstance(getApplicationContext());

        int loaderId = MOVIE_LOADER_ID;
        mCallback = MovieDetailsActivity.this;
        LoaderManager.getInstance(this).initLoader(loaderId, null, mCallback);
    }

    /**
     * Instantiate and return a new Loader for the given ID
     * @param id The ID whose loader is to be created
     * @param loaderArgs Any arguments supplied by the caller
     * @return Return a new Loader instance that is ready to start loading
     */
    @Override
    public Loader<Movie> onCreateLoader(int id, final Bundle loaderArgs) {

        return new AsyncTaskLoader<Movie>(this) {
            Movie mMovie = null;

            @Override
            protected void onStartLoading() {
                if (mMovie != null) {
                    deliverResult(mMovie);
                } else {
                    forceLoad();
                }
            }

            @Override
            public Movie loadInBackground() {

                try {
                    URL movieRequestUrl = UrlUtils.buildMovieUrl(mMovieId);
                    return JsonUtils.getMovieFromJson(UrlUtils.getResponseFromRequestUrl(movieRequestUrl));
                } catch (Exception e) {
                    e.printStackTrace();
                    return null;
                }
            }

            public void deliverResult(Movie movie) {
                mMovie = movie;
                super.deliverResult(movie);
            }
        };
    }

    /**
     * Called when a previously created loader has finished its load
     * @param loader The Loader that has finished
     * @param movie The data generated by the Loader
     */
    @Override
    public void onLoadFinished(Loader<Movie> loader, Movie movie) {
        if (null == movie) {
            showErrorMessage();
        } else {
            mMovie = movie;
            setViews();
        }
    }

    /**
     * Called when a previously created loader is being reset, and thus making its data unavailable
     * The application should at this point remove any references it has to the Loader's data
     * @param loader The Loader that is being reset
     */
    @Override
    public void onLoaderReset(Loader<Movie> loader) {

    }

    private void bindFavIcon() {
        mBinding.ivFavorite.setOnClickListener((view) -> {
            AppExecutor.getInstance().diskIO().execute(() -> {
                if (mFavorite) {
                    Log.d(LOG_TAG, "Remove movie from database via Room.");
                    mAppDatabase.movieDao().removeMovie(mMovie);
                } else {
                    Log.d(LOG_TAG, "Insert movie into database via Room.");
                    mAppDatabase.movieDao().addMovie(mMovie);
                }
                runOnUiThread(() -> setFavIcon());
            });
        });
    }

    private void invalidateData() {

    }

    private void setFavIcon() {
        AppExecutor.getInstance().diskIO().execute(() -> {
            final Movie movie = mAppDatabase.movieDao().getMovieById(mMovie.getMovieId());

            if (movie == null) {
                mFavorite = false;
                mBinding.ivFavorite.setImageResource(R.drawable.ic_heart_border_pink_24dp);
            } else {
                mFavorite = true;
                mBinding.ivFavorite.setImageResource(R.drawable.ic_heart_pink_24dp);
            }
        });
    }

    private void setViews() {
        mBinding.tvOriginalTitle.setText(mMovie.getOriginalTitle());
        mBinding.tvReleaseYear.setText(mMovie.getReleaseDate().substring(0, 4));
        mBinding.tvDuration.setText(mMovie.getDuration() + " mins");
        mBinding.tvVoteAverage.setText(String.valueOf(mMovie.getUserRating()));
        mBinding.tvOverview.setText(mMovie.getSynopsis());

        Picasso.get()
                .load(POSTER_BASE_URL + mMovie.getPosterPath())
                .placeholder(R.drawable.placeholder)
                .error(R.drawable.error)
                .into(mBinding.ivPosterThumb);
        bindFavIcon();
        setFavIcon();
    }

    private void showErrorMessage() {
        mBinding.ivFavorite.setVisibility(View.INVISIBLE);
        mBinding.ivPosterThumb.setVisibility(View.INVISIBLE);
        mBinding.tvDuration.setVisibility(View.INVISIBLE);
        mBinding.tvOriginalTitle.setVisibility(View.INVISIBLE);
        mBinding.tvOverview.setVisibility(View.INVISIBLE);
        mBinding.tvReleaseYear.setVisibility(View.INVISIBLE);
        mBinding.tvVoteAverage.setVisibility(View.INVISIBLE);

        mBinding.tvErrorMessage.setVisibility(View.VISIBLE);
    }
}
